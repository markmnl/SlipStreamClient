<imageModule category="Image" creation="2015-03-19 09:03:43.11 UTC" deleted="false" description="Standalone deployment of Ubuntu-12.04 machine" isBase="true" isLatestVersion="true" lastModified="2015-07-02 15:17:42.72 UTC" loginUser="ubuntu" logoLink="https://slipstream.sixsq.com/images/modules-logos/ubuntu.svg" parentUri="module/examples/images" platform="ubuntu" shortName="ubuntu-12.04-standalone" version="1808">
   <authz groupCreateChildren="false" groupDelete="false" groupGet="true" groupPost="true" groupPut="true" inheritedGroupMembers="true" owner="sixsq" ownerCreateChildren="true" ownerDelete="true" ownerGet="true" ownerPost="true" ownerPut="true" publicCreateChildren="false" publicDelete="false" publicGet="true" publicPost="true" publicPut="false">
      <groupMembers>
         </groupMembers>
   </authz>
   <commit author="sixsq">
      <comment>Initial version of this module</comment>
   </commit>
   <cloudNames length="12">
      </cloudNames>
   <runs count="0" limit="20" offset="0" totalCount="0" />
   <targets>
      <target name="execute">#!/bin/bash -x

# update all of the packages to the latest releases
apt-get clean
apt-get update


#
# install vnc access server 
#begin ...

#install GUI on server and cloud editions
apt-get -y install --no-install-recommends ubuntu-desktop

#install gnome desktop environment
apt-get -y install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal

#install vnc4server package.
apt-get -y install vnc4server

#make a backup copy.
cp /usr/bin/vncserver /usr/bin/vncserver.bkp



#copy in line 58 of file /usr/bin/vncserver
sed "58i\ \"gnome-panel &amp;\\\n\".\n \"gnome-settings-daemon &amp;\\\n\".\n \"metacity &amp;\\\n\".\n \"nautilus &amp;\\\n\".\n \"gnome-terminal &amp;\\\n\"." /usr/bin/vncserver


# create a random password for vnc_user
vnc_password=`openssl rand -base64 6`
crypt_vnc_password=`echo $vnc_password | openssl passwd -crypt -stdin`


# publish password so vnc_user can log in
# will be visible in machine parameters in SlipStream interface
ss-set vnc_password $vnc_password


#ouvre le port utilis&#233; par vnc
iptables -I INPUT 1 -j ACCEPT -p tcp --dport 5900:5902 



touch /etc/init.d/vncserver
chmod +x /etc/init.d/vncserver

cat &gt; /etc/init.d/vncserver &lt;&lt;'EOF'
#!/bin/bash
unset VNCSERVERARGS
VNCSERVERS=""
[ -f /etc/vncserver/vncservers.conf ] &amp;&amp; . /etc/vncserver/vncservers.conf
prog=$"VNC server"
start() {
 . /lib/lsb/init-functions
 REQ_USER=$2
 echo -n $"Starting $prog: "
 ulimit -S -c 0 &gt;/dev/null 2&gt;&amp;1
 RETVAL=0
 for display in ${VNCSERVERS}
 do
 export USER="${display##*:}"
 if test -z "${REQ_USER}" -o "${REQ_USER}" == ${USER} ; then
 echo -n "${display} "
 unset BASH_ENV ENV
 DISP="${display%%:*}"
 export VNCUSERARGS="${VNCSERVERARGS[${DISP}]}"
 su ${USER} -c "cd ~${USER} &amp;&amp; [ -f .vnc/passwd ] &amp;&amp; vncserver :${DISP} ${VNCUSERARGS}"
 fi
 done
}
stop() {
 . /lib/lsb/init-functions
 REQ_USER=$2
 echo -n $"Shutting down VNCServer: "
 for display in ${VNCSERVERS}
 do
 export USER="${display##*:}"
 if test -z "${REQ_USER}" -o "${REQ_USER}" == ${USER} ; then
 echo -n "${display} "
 unset BASH_ENV ENV
 export USER="${display##*:}"
 su ${USER} -c "vncserver -kill :${display%%:*}" &gt;/dev/null 2&gt;&amp;1
 fi
 done
 echo -e "\n"
 echo "VNCServer Stopped"
}
case "$1" in
start)
start $@
;;
stop)
stop $@
;;
restart|reload)
stop $@
sleep 3
start $@
;;
condrestart)
if [ -f /var/lock/subsys/vncserver ]; then
stop $@
sleep 3
start $@
fi
;;
status)
status Xvnc
;;
*)
echo $"Usage: $0 {start|stop|restart|condrestart|status}"
exit 1
esac
EOF



update-rc.d vncserver defaults

touch /etc/vncservers.conf
cat &gt; /etc/vncservers.conf &lt;&lt;'EOF'
VNCSERVERS="1:ubuntu"
VNCSERVERARGS[1]="-geometry 1024x600"
EOF


#mkdir /home/ubuntu/.vnc
HOME=~ubuntu sudo -u ubuntu vncserver &lt;&lt;EOF
${vnc_password}
${vnc_password}
EOF


#End of vnc installation
#


# set the deployment url to SSH url
url=`ss-get url.ssh`
ss-set ss:url.service "${url}"


# set the customstate to inform user that everything's ready
ss-set statecustom 'CentOS 6 Ready!'</target>
      <target name="onvmremove" />
      <target name="report" />
      <target name="onvmadd" />
   </targets>
   <packages />
   <prerecipe />
   <recipe />
   <cloudImageIdentifiers>
      </cloudImageIdentifiers>
   <parameters>
      <entry>
         <string>network</string>
         <parameter category="Cloud" description="Network type" isSet="true" mandatory="true" name="network" order="0" order_="0" readonly="false" type="Enum">
            <enumValues length="2">
               <string>Public</string>
               <string>Private</string>
            </enumValues>
            <value>Public</value>
            <defaultValue>Public</defaultValue>
         </parameter>
      </entry>
      <entry>
         <string>hostname</string>
         <parameter category="Output" description="hostname/ip of the image" isSet="false" mandatory="true" name="hostname" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>vnc_password</string>
         <parameter category="Output" description="vnc_password" isSet="false" mandatory="false" name="vnc_password" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>extra.disk.volatile</string>
         <parameter category="Cloud" description="Volatile extra disk in GB" isSet="false" mandatory="true" name="extra.disk.volatile" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>instanceid</string>
         <parameter category="Output" description="Cloud instance id" isSet="false" mandatory="true" name="instanceid" order="0" order_="0" readonly="false" type="String" />
      </entry>
      </parameters>
   <notes length="0" />
</imageModule>