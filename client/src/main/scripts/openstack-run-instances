#!/usr/bin/env python

import re
import time
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
import sys

from slipstream.util import nostdouterr
from slipstream.util import nostdout
from slipstream.ConfigHolder import ConfigHolder
from slipstream.NodeDecorator import KEY_RUN_CATEGORY, RUN_CATEGORY_DEPLOYMENT
from slipstream.cloudconnectors.openstack.OpenStackCommand import OpenStackCommand 
from slipstream.cloudconnectors.openstack.OpenStackClientCloud import OpenStackClientCloud

class MainProgram(OpenStackCommand):
    def __init__(self):
        super(MainProgram, self).__init__()
    
    def setProgramOptions(self):
        self.parser.add_option('--image-id', dest='imageId',
                               help='Image ID. Mandatory.',
                               default='', metavar='ID')

        self.parser.add_option('--instance-name', dest='instance_name',
                               help='Name of the instance',
                               default='', metavar='NAME')

        self.parser.add_option('--instance-type', dest='instance_type',
                               help='Instance Type (Flavor)',
                               default=None, metavar='TYPE')

        self.parser.add_option('--network-type', dest='network_type',
                               help='Network type (public or private)',
                               default='', metavar='NETWORK-TYPE')

        self.parser.add_option('--public-key', dest='public_key',
                               help='Public key in the OpenSSH format',
                               default='', metavar='PUBKEY')

        self.parser.add_option('--security-groups', dest='security_groups',
                               help='Comma separated list of security groups',
                               default='', metavar='SECGROUPS')

        self.parser.add_option('--context-script', dest='context_script',
                               help='Context script',
                               default='', metavar='SCRIPT')

    def checkOptions(self):
        if not all((self.options.imageId, self.options.instance_type, self.options.region, 
                    self.options.instance_name)):
            self.parser.error('Some mandatory options were not given values.')
            
    def _setUserInfo(self):
        super(MainProgram, self)._setUserInfo()
        
        self.userInfo['General.ssh.public.key'] = self.options.public_key

    def doWork(self):
        ss_node = {'nodename' : self.options.instance_name,
                   'image' : {'attributes' : {'imageId' : self.options.imageId},
                              'cloud_parameters' : {'openstack':{'openstack.security.groups' : self.options.security_groups,
                                                                'openstack.instance.type' : self.options.instance_type}
                                                    ,'Cloud': {'network' : self.options.network_type} 
                                                    },
                               'extra_disks' : {}
                             },
                   }

        with nostdouterr():
            node = self._startImage(ss_node)
        #print '%s, %s' % (node['id'], node['ip'])
        
        try:
            with nostdouterr():
                node['ip'] = self._waitAndGetIp(node)
        finally:
            print '%s, %s' % (node['id'], node['ip'])

    def _startImage(self, ss_node):
        nodename = ss_node['nodename']

        cc = OpenStackClientCloud(ConfigHolder(options={'verboseLevel':0, 
                                               KEY_RUN_CATEGORY: RUN_CATEGORY_DEPLOYMENT},
                                               context={'foo':'bar'}))
        try:
            cc.initialization(self.userInfo)
            node = cc._startImage(self.userInfo, 
                                  cc._extractImageInfoFromNodeInfo(ss_node), 
                                  nodename, self.options.context_script)
        finally:
            cc.finalization(self.userInfo)

        return {'id': node['id'], 'ip': 'Unknown', 'cc': cc, 'node': node}

    def _waitAndGetIp(self, node):
        cc = node['cc']
        return cc._waitAndGetInstanceIpAddress(node['node'])['ip']


if __name__ == "__main__":
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
    except Exception as e:
        print >> sys.stderr, e
        exit(1)
