#!/usr/bin/env python

import os
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

from slipstream.util import nostdouterr
from slipstream.ConfigHolder import ConfigHolder
from slipstream.NodeDecorator import KEY_RUN_CATEGORY, RUN_CATEGORY_DEPLOYMENT
from slipstream.cloudconnectors.cloudstack.CloudStackCommand import CloudStackCommand
from slipstream.cloudconnectors.cloudstack.CloudStackClientCloud import CloudStackClientCloud
from slipstream.cloudconnectors.cloudstack.CloudStackAdvancedZoneClientCloud import CloudStackAdvancedZoneClientCloud


def _getBootstrapScript(self, nodename, preExport=None, preBootstrap=None, postBootstrap=None,
                        username=None):
    return os.environ['context_script']

def publishVmInfo(self, nodename, vm, image_info):
    pass

def _generateNodeName(self, nodename, node_number):
    return nodename

class MainProgram(CloudStackCommand):

    def __init__(self):
        super(MainProgram, self).__init__()

    def setProgramOptions(self):
        self.parser.add_option('--image-id', dest='imageId',
                               help='Image ID. Mandatory.',
                               default='', metavar='ID')

        self.parser.add_option('--instance-name', dest='instance_name',
                               help='Name of the instance',
                               default='', metavar='NAME')

        self.parser.add_option('--instance-type', dest='instance_type',
                               help='Instance Type',
                               default=None, metavar='TYPE')

        self.parser.add_option('--network-type', dest='network_type',
                               help='Network type (public or private)',
                               default='public', metavar='NETWORK-TYPE')
        
        self.parser.add_option('--networks', dest='networks',
                               help='Networks (comma separated)',
                               default='', metavar='NETWORKS')

        self.parser.add_option('--public-key', dest='public_key',
                               help='Public key in the OpenSSH format',
                               default='', metavar='PUBKEY')

        self.parser.add_option('--security-groups', dest='security_groups',
                               help='Comma separated security groups',
                               default='', metavar='SECGROUP')

        self.parser.add_option('--context-script', dest='context_script',
                               help='Context script',
                               default='', metavar='SCRIPT')
        
        self.parser.add_option('--zone-type', dest='zone_type',
                               help='Type of the zone (Basic [default], Advanced)',
                               default='Basic', metavar='ZONE-TYPE')

    def checkOptions(self):
        if not all((self.options.imageId, self.options.instance_name,
                    self.options.instance_type, self.options.public_key)):
            self.parser.error("Some mandatory options were not given values.")

    def _setUserInfo(self):
        super(MainProgram, self)._setUserInfo()
        self.userInfo['General.ssh.public.key'] = self.options.public_key

    def doWork(self):
        ss_node = {
            'nodename': self.options.instance_name,
            'multiplicity': 1,
            'image': {
                'attributes': {
                    'imageId': self.options.imageId,
                    'platform' : 'linux'
                },
                'cloud_parameters': {
                    'cloudstack': {
                        'cloudstack.instance.type': self.options.instance_type,
                        'cloudstack.security.groups': self.options.security_groups,
                        'cloudstack.networks': self.options.networks
                    },
                    'Cloud': {
                        'network': self.options.network_type
                    }
                },
                'extra_disks': {}
            },
        }
        os.environ['context_script'] = self.options.context_script or ''
        
        with nostdouterr():
            node = self._startImage(ss_node)
        print '%s, %s' % (node['id'], node['ip'])

    def _startImage(self, ss_node):
        nodename = ss_node['nodename']

        if self.options.zone_type.lower() == 'advanced':
            cc = CloudStackAdvancedZoneClientCloud(ConfigHolder(options={'verboseLevel': 0,
                                                                         KEY_RUN_CATEGORY: RUN_CATEGORY_DEPLOYMENT},
                                                                         context={'foo': 'bar'}))
        else:
            cc = CloudStackClientCloud(ConfigHolder(options={'verboseLevel': 0,
                                                    KEY_RUN_CATEGORY: RUN_CATEGORY_DEPLOYMENT},
                                                    context={'foo': 'bar'}))

        CloudStackClientCloud._getBootstrapScript = _getBootstrapScript
        CloudStackClientCloud._generateNodeName = _generateNodeName
        CloudStackClientCloud.publishVmInfo = publishVmInfo
            
        vms = cc.startNodesAndClients(self.userInfo, [ss_node])
        vm = vms[0].itervalues().next()
        return vm

if __name__ == "__main__":
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
    except Exception as e:
        print e
        exit(1)
